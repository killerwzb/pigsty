###############################################################################
# Setup Redis Instance Resource
###############################################################################

#------------------------------------------------------------------------------
# Assert before launch instances
#------------------------------------------------------------------------------
- name: Check redis instance existance
  tags: [ redis, redis_precheck ]
  block:
    - name: Check redis {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}:{{ port }} exists
      any_errors_fatal: true
      command: 'ss -tp state listening sport = :{{ port }}'
      register: check_redis_port_result

    - name: Set fact whether redis port is open
      connection: local
      tags: [ redis_ins , redis_precheck ]
      set_fact: { redis_exists: "{{ 'redis' in check_redis_port_result.stdout }}" }

    # when any running instance exists, abort play in two cases:
    # 1. redis_safeguard = true (if safeguard is enabled, redis instance will never be purged!)
    # 2. redis_clean == 'false' (if redis clean is enabled , redis instance will be purged during init)
    - name: Abort due to existing redis instance
      connection: local
      when: redis_exists|bool and (redis_safeguard|bool or not redis_clean|bool)
      any_errors_fatal: true
      fail: msg="Abort because redis instance {{ redis_cluster }}-{{ redis_node }}-{{ port }} is running"

#------------------------------------------------------------------------------
# Clean [DANGEROUS!]
#------------------------------------------------------------------------------
- name: Clean existing redis instance
  tags: [ redis, redis_clean ]
  block:

    - name: PURGING RUNNING INSTANCE {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      # connection: local # leave some time for manual intervention
      when: not redis_safeguard|bool and redis_exists|bool and redis_clean|bool # DANGEROUS
      debug:
        msg: "[DANGEROUS] RUNNING REDIS INSTANCE {{ redis_cluster }}-{{ redis_node }}-{{ port }} WILL BE PURGED!"

    - name: SHUTTING DOWN {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      ignore_errors: true
      shell: |
        systemctl stop {{ redis_cluster }}-{{ redis_node }}-{{ port }}.service ;
        if lsof -t -i tcp:{{ port }}; then
            kill $(lsof -t -i tcp:{{ port }} );
        fi ;
        if lsof -t -i tcp:{{ port }}; then
            kill -9 $(lsof -t -i tcp:{{ port }} );
        fi ;
        # /bin/true

    - name: REMOVING DATADIR {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      when: redis_rmdata|bool and (not redis_safeguard|bool and redis_exists|bool and redis_clean|bool)
      file: path={{ redis_fs_main }}/redis/{{ redis_cluster }}-{{ redis_node }}-{{ port }} state=absent owner=redis mode=0700


#------------------------------------------------------------------------------
# Config
#------------------------------------------------------------------------------
# create data dir & config & systemd service
- name: Create redis resource dir
  tags: [ redis, redis_config ]
  become: yes
  block:

    # data dir @ /data/redis/<port> (default)
    - name: Create dir for {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      file: path={{ redis_fs_main }}/redis/{{ redis_cluster }}-{{ redis_node }}-{{ port }} state=directory owner=redis mode=0700

    # config @ /etc/redis/<port>.conf
    - name: Render config for {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      template: src={{ config_template }} dest=/etc/redis/{{ redis_cluster }}-{{ redis_node }}-{{ port }}.conf owner=redis mode=0700
      vars:
        upstream: "{{ conf['replica_of']|default(None) }}"
        config_template: "{% if redis_mode == 'sentinel' %}redis-sentinel.conf{% else %}{{ redis_conf }}{% endif %}"

    # services name examples:  redis-test-1-6379 , redis-sentinel-2-26379
    - name: Render systemd svc for {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
      template: src={{ service_template }} dest=/usr/lib/systemd/system/{{ svcname }} owner=root mode=644
      vars:
        svcname: "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
        service_template: "{% if redis_mode == 'sentinel' %}redis-sentinel.service{% else %}redis.service{% endif %}"


#------------------------------------------------------------------------------
# launch
#------------------------------------------------------------------------------
- name: Launch {{ redis_cluster }}-{{ redis_node }}-{{ port }} @ {{ inventory_hostname }}
  tags: [ redis, redis_launch ]
  # systemd: name="{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service" state=restarted enabled=yes daemon_reload=yes
  shell: |
    systemctl daemon-reload;
    systemctl enable "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"
    systemctl restart "{{ redis_cluster }}-{{ redis_node }}-{{ port }}.service"

    
