#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   nodes.yml
# Mtime     :   2020-05-12
# Mtime     :   2022-04-28
# Desc      :   init nodes for pigsty
# Path      :   nodes.yml
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#

#---------------------------------------------------------------
# usage
#---------------------------------------------------------------
# 1. make sure you have nopass ssh & sudo access to target nodes
# 2. make sure you have defined these nodes in your inventory
# 3. run ./nodes.yml -l <selector> to finish nodes provisioning
#--------------------------------------------------------------
# ./nodes.yml -t node-id          # print node identity
# ./nodes.yml -t node_admin       # create admin user for nodes
# ./nodes.yml -t node-exporter    # deploy and register node-exporter
# ./nodes.yml -t node-register    # register node_exporter to prometheus
# ...
# ./nodes.yml -t dcs -e consul_clean=clean  # force reinstall consul
# ./nodes.yml -t node_admin -k -K -e ansible_user=<another admin>
# ...
#--------------------------------------------------------------

#---------------------------------------------------------------
# node identity
#---------------------------------------------------------------
# nodename : optional, used as node identity, default to existing name
# node_cluster : optional, used as node identity, default to `nodes`
#
#  nodename -> ins  ,  node_cluster  -> cls
#
# you can overwrite node identity with pgsql identity on 1:1 deployment
# with option `pg_hostname: true`
#---------------------------------------------------------------
- name: Node Identity
  hosts: all
  gather_facts: no
  tags: [ always, node-id ]
  connection: local
  tasks:

    # overwrite nodes identity with pgsql identity if pg_hostname is true
    - name: Overwrite node_cluster
      when: (pg_hostname is defined and pg_hostname|bool) and (node_cluster is not defined or node_cluster == 'nodes' or node_cluster == '') and (pg_cluster is defined and pg_cluster != '')
      set_fact: { node_cluster: "{{ pg_cluster }}" }  # use pg_cluster as non-trivial node_cluster name

    - name: Overwrite nodename
      when: (pg_hostname is defined and pg_hostname|bool) and (nodename is not defined or nodename == '') and (pg_cluster is defined and pg_cluster != '' and pg_seq is defined)
      set_fact: { nodename: "{{ pg_cluster }}-{{ pg_seq }}" }

    - debug: { msg: "ins={{ nodename|default('NULL') }} cls={{ node_cluster|default('NULL') }}" }

#---------------------------------------------------------------
# Node Init
#---------------------------------------------------------------
- name: Node Init
  become: yes
  hosts: all
  gather_facts: no
  tags: node-init
  roles:

    # prepare node for pigsty
    - role: node
      tags: node

#---------------------------------------------------------------
# Node Docker
#---------------------------------------------------------------
- name: Node Docker
  become: yes
  hosts: all
  gather_facts: no
  tags: node-docker
  roles:
    # init docker if enabled
    - role: docker
      tags: docker
      when: docker_enabled|bool

#---------------------------------------------------------------
# Node DCS
#---------------------------------------------------------------
- name: Node DCS
  become: yes
  hosts: all
  gather_facts: no
  tags: node-dcs
  roles:

    # init dcs:consul server/agent
    - role: consul
      tags: [ dcs, consul ]

#---------------------------------------------------------------
# Node monitor
#---------------------------------------------------------------
- name: Node Monitor
  become: yes
  hosts: all
  gather_facts: no
  tags: node-monitor
  roles:

    # init & register node exporter
    - role: node_exporter
      tags: node-exporter
      when: node_exporter_enabled|bool

    # init & register promtail log agent
    - role: promtail
      tags: promtail
      when: promtail_enabled|bool

    # register node-exporter & docker to prometheus
    - role: node_register
      tags: node-register

#---------------------------------------------------------------
...