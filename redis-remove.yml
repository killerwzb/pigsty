#!/usr/bin/env ansible-playbook
---
#==============================================================#
# File      :   redis-remove.yml
# Mtime     :   2022-03-20
# Mtime     :   2022-05-01
# Desc      :   remove redis from nodes
# Path      :   redis-remove.yml
# Copyright (C) 2018-2022 Ruohang Feng (rh@vonng.com)
#==============================================================#


#==============================================================#
# Playbook : Remove Redis Cluster/Node/Instance                #
#==============================================================#
#  Remove cluster `redis-test`
#     redis-remove.yml -l redis-test
#
#  Remove all instance on redis node 10.10.10.13
#     redis-remove.yml -l 10.10.10.13
#
#  Remove one specific instance 10.10.10.13:6501
#     redis-remove.yml -l 10.10.10.13 -e redis_port=6501
#==============================================================#

#---------------------------------------------------------------
# Remove Redis Instances
#---------------------------------------------------------------

#---------------------------------------------------------------
# Remove Redis Node
#---------------------------------------------------------------
- name: Redis Node Remove
  hosts: all
  become: true
  gather_facts: no
  tasks:

    - name: Abort due to redis_safeguard enabled
      connection: local
      when: redis_safeguard|bool
      any_errors_fatal: true
      fail: msg="Abort due to redis_safeguard for {{ redis_cluster }}-{{ redis_node }} @ {{ inventory_hostname }} is enabled, use -e redis_safeguard=false to override"

    #------------------------------------------------------------------------------
    # Remove register from prometheus & stop redis-exporter
    #------------------------------------------------------------------------------
    - name: Remove redis register from prometheus
      when: not redis_safeguard|bool
      tags: [ register, redis_deregister, deregister_prometheus ]
      block:

        # remove whole redis instances register on that node
        - name: Deregister redis node from prometheus
          when: redis_port is not defined
          delegate_to: '{{ item }}'
          with_items: '{{ groups["meta"] }}'
          file: path=/etc/prometheus/targets/redis/{{ redis_cluster }}-{{ redis_node }}.yml state=absent

        # remove single redis instance on that node if redis_port is defined
        - name: Deregister redis instance from prometheus # (single instance)
          when: redis_port is defined
          delegate_to: '{{ item }}'
          with_items: '{{ groups["meta"] }}'
          copy:
            dest: /etc/prometheus/targets/redis/{{ redis_cluster }}-{{ redis_node }}.yml
            content: |
              # {{ redis_cluster }}-{{ redis_node }} @ {{ inventory_hostname }}
              
              {% for port in redis_instances %}
              {% if port != redis_port|int %}
              - labels: { cls: {{ redis_cluster }}, ins: {{ redis_cluster }}-{{ redis_node }}-{{ port }}, instance: {{ inventory_hostname }}:{{ port }} }
                targets: [ redis://{{ inventory_hostname }}:{{ port }} ]
              {% endif %}
              {% endfor %}

        - name: Shut redis exporter service
          when: not redis_safeguard|bool and redis_port is not defined
          ignore_errors: yes
          tags: redis
          systemd: name="redis_exporter.service" state=stopped enabled=no


    #------------------------------------------------------------------------------
    # Stop redis instances
    #------------------------------------------------------------------------------
    - name: Stop redis systemd service
      when: not redis_safeguard|bool
      ignore_errors: yes
      tags: redis
      block:

        # stop redis instances (whole node)
        - name: Shut redis node systemd services
          when: not redis_port is defined
          systemd: name="{{ redis_cluster }}-{{ redis_node }}-{{ item.key }}.service" state=stopped enabled=no
          with_dict: "{{ redis_instances }}"

        # stop redis instance (single instance)
        - name: Shut redis instance systemd service
          when: redis_port is defined
          systemd: name="{{ redis_cluster }}-{{ redis_node }}-{{ redis_port }}.service" state=stopped enabled=no


    #------------------------------------------------------------------------------
    # Remove data dir if redis_rmdata
    #------------------------------------------------------------------------------
    - name: Stop redis systemd service
      when: not redis_safeguard|bool and redis_rmdata|bool
      ignore_errors: yes
      tags: redis
      block:

        # remove entire redis data dir
        - name: Remove redis data dir
          when: not redis_port is defined
          file: path={{ redis_fs_main }}/redis state=absent owner=root mode=0777

        # remove single instance data
        - name: Remove redis instance data dir
          when: redis_port is defined
          file: path={{ redis_fs_main }}/redis/{{ redis_cluster }}-{{ redis_node }}-{{ redis_port }} state=absent


...